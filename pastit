#!/bin/bash
# pastit

# Check .env exists
filename="/etc/pastit/.env"
if [ ! -f "$filename" ]; then
     echo -e ".env file not found! Edit /etc/pastit/.env.example and rename it to /etc/pastit/.env to configure."
     exit 1
fi

# Load .env
source "$filename"

#### CONFIG OPTIONS ####
# Default extension (.sh/.py/.zsh)
# This will be used if the file you provided has no common extension, I.E. stuff like .zshrc, or /etc/hosts. This helps zipline offer a default type of syntax highlighting, usually base this around what OS youre using. So by default I made it 'sh' so that extensionless files get bash script syntax highlighting.
defaultextension=sh

# Consider files starting with dot as extensionless (true/false)
considerFilesStartingWithDotExtensionless=true
#### END CONFIG ####
originalurl=$host
if [[ "${host}" != */ ]]; then
  url="${host}/"
fi

URL="${url}api/upload"


#### SCRIPT START ####
# Check if text is provided via stdin
if [ -p /dev/stdin ]; then
    # Read piped input into a variable
    data="$(cat)"
elif [ -n "$1" ]; then
    # Handle file input
    if [ -f "$1" ]; then
        data="$(cat "$1")"
    else
        echo "File not found, try again."
        exit 1
    fi
else
    echo "No input provided."
    exit 1
fi

# Check if the file has an extension, if not add default extension
filename=$(basename -- "$1")
extension="${filename##*.}"
if [ "$extension" == "$filename" ] || ( $considerFilesStartingWithDotExtensionless && [[ "$filename" == .* ]] ); then
    filename="${filename}.$defaultextension"
fi

# Create the file in the /tmp directory
output_file="/tmp/_${filename}"

# Write data to the file
echo "$data" > "$output_file"

# API endpoint and headers
url="$URL"

# Sending the request using curl and capturing the response
response=$(curl -s -X POST -H "Authorization: $authorization_token" \
                        -H "Format: random" \
                        -H "Original-Name: true" \
                        -F "file=@${output_file}" \
                        $url)

if [ -z "$response" ]; then
  echo "Error: Unable to retrieve zipline from '$url'. Please verify that the URL is correct."
  exit 1
fi

# Extracting just the URL from the JSON response
file_url=$(echo "$response" | jq -r '.files[0]')

# Replace /u/ with /code/ in the URL
modified_url=$(echo "$file_url" | sed 's|/u/|/code/|')

# Clean up: Remove temporary file
rm "$output_file"

if [[ -n "$target_domain" ]]; then
echo "$modified_url" | sed "s!https://$originalurl!$target_domain!g" | sed "s!http://!https://!"
else
echo "$modified_url"
fi
